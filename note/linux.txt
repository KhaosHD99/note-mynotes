1 /bin/sh ./script.sh
  以这种方式执行不需要script.sh文件具有可执行权限
2 进程间采用内存保护技术，不会因为一个应用程序的崩溃而导致整个系统的崩溃。
3 安装和登录命令：login、 shutdown、 halt、 reboot 、mount、umount 、chsh
  文件处理命令：file、 mkdir、 grep、dd、 find、 mv 、ls 、diff、 cat、 ln
  系统管理相关命令： df、 top、 free、 quota 、at、 lp、 adduser、 groupadd kill、 crontab、   tar、 unzip、 gunzip 、last
  网络操作命令：ifconfig、 ip 、ping 、 netstat 、telnet、 ftp、 route、 rlogin rcp 、finger   、mail 、nslookup
  系统安全相关命令： passwd 、su、 umask 、chgrp、 chmod、chown、chattr、sudo、 pswho
4 dir_color
5 编译内核
6 在 Linux 的世界中，絕大部分的設定檔都是以 ASCII 的純文字形態存在
7 vim 编辑器 操作不同
8 Linux Native（根分区和Linux Swap（数据交换区）
9 Linux应安装在硬盘分区的最后一个扩展分区
10 cp -a
11 ctr+Backspace
12 用autotools生成的makefile报错:missing separator，其实是makefile.am中missing separator
13 makefile.am中的subdirs是指要生成makefile的子目录
14 fork return nonzero value is subProcess's PID
15 /boot/grub/menu.lst下设置分辨率
   kernel: .....    vga=791
   Colors ( depth)- 640x480- 800x600- 1024x768- 1280x1024- 1600x1200|
    -------------------+---------+-----------+-----------+-------------+--------------|
   256    ( 8 bit) |   769         771          773              775           796    |
   32,768 (15 bit) |   784         787          790              793           797    |
   65,536 (16 bit) |   785         788          791              794           798    |
   16.8M (24 bit)  |   786         789          792              795           799    |
16 gcc test.c –o test `pkg-config --cflags --libs gtk+-2.0 libglade-2.0` -export-dynamic
17 apt-get install samba
   apt-get install openSSH-server
   apt-get install build-essential
   apt-get install libtool
   
   apt-get install x-window-system-core
   apt-get install libgtk2.0-dev
   apt-get install glade

18 export DISPLAY=:0.0
19 ./configure --without-libtiff --x-includes=/usr/X11R6/includes --x-            libraries=/usr/X11R6/lib
20 pkg-config --modversion gtk+-2.0
21 
22 apt-get update --fix-missing
23 
24 X resolution /etc/X11/xorg.conf depth 24
   Virtual 800 450
25/etc/resolv.conf dns
26 build-essential
27 
28 debian-based system : ubuntus
29 etc/profile export LS_OPTIONS='--color=auto'
30 Makefile.am中的subdirs 分编译的先后顺序
31 gtk只认utf8编
32 fc-list | grep -i sun查看是否已安装宋体
33 装完字体后，给所有用户权限
34 gtk-builder-convert *.glade *.xml
35 If you get "Gtk-WARNING **: Could not find signal handler..." and your handlers are          inside *.cpp file, add to their    declaration: 
   extern "C" .............. . 
   Otherwise exported names are "decorated", which is C++'s default.
36 c/c++相互调用本质上就是用extern "C"屏蔽c++编译器生成的用来区分重载函数的符号
37 autotools中的configure.in的项目名称与Makefile.am中的可执行文件名称不要冲突
38 iface eth0 inet static
   auto eht0
   
   gateway
   address
   netmask
39 find / -name file
   grep string -i -r file/dir
40 printf add \n
41 top layer Makefile.am: "export INCLUDES" will be global 
42 gbk
   1)表示繁体字和简体字
   2)只表示中文

   gb2312
   1)只能表示简体字
   2)只表示中文   
   
   Unicode：
   1)不兼容任何编码
   2)定长编码

   utf:  
   1)兼容iso8859-1
         不定长编码(1~6)

43 若LC_COLLATE为"POSIX"或"C"，则strcoll()与strcmp()作用完全相同

44在项目的起始阶段，目的平台尚未建立，因此需要做交叉编译，以生成我们所需要的bootloader（启动   引导代码）以及操作系统核心；其次，当目的平台能启动之后，由于目的平台上资源的限制，当我们     编译大型程序时，依然可能需要用到交叉编译

45 对于交叉编译器，可以自己生成
46 bootloader: 
   1)redboot
   2)U-Boot 
   3)Bootldr 

1022:
   动态库的搜索路径搜索的先后顺序是：
   1.编译目标代码时指定的动态库搜索路径；
   2.环境变量LD_LIBRARY_PATH指定的动态库搜索路径；
   3.配置文件/etc/ld.so.conf中指定的动态库搜索路径；
   4.默认的动态库搜索路径/lib；
   5.默认的动态库搜索路径/usr/lib。

1023
   1 date +%T -s 13:07:00
   2 fnPhonebook_LDFLAGS=-Wl,-rpath,/home/elon/opt/x86-usr/lib
     fnPhonebook_CFLAGS=-Wl,-rpath,/home/elon/opt/x86-usr/lib
   3 profile 是交互式、login 方式进入 bash 运行的
     bashrc 是交互式 non-login 方式进入 bash 运行的

1025
   1 long long lg=8888...88LL
<<<<<<< .mine
     lld%

1028 apt-get install gtk2.0-examples=======
     lld%

10.28 每gtk_builder_get_object一次，就实例化多一个 >>>>>>> .r271
   
10.29 debian /etc/init.d/samba restart
                         smbd

11.02 const char *home = getenv("HOME");
      
      imgdir=$(datadir)/img
      img_DATA=$(top_srcdir)/src/phonebook/img/*

11.05 aptitude

11.06 #PKG_CHECK_MODULES(GTK2, [GTK2], found=yes, found=no)
   #if test x$found = xyes ; then
   #  CFLAGS="$CFLAGS $GTK2_CFLAGS"
   #  LIBS="$LIBS $GTK2_LIBS"
   #else
   #  AC_MSG_NOTICE([Could not find GTK2 DEFINES])
   # LIBS="$LIBS `pkg-config --libs gtk+-2.0`"
   # CFLAGS="$CFLAGS `pkg-config --cflags --libs gtk+-2.0` -export-dynamic"
   #fi
	
   pc file pass args to configure.in 
   ##_ multi args

11.21 apt-get install lrzsz
      couldn't read interface file: interface wrong
         
1201 offline mode of firefox is ridiculous 
     client session is ridiculous(samba)
     net use * /del

1209 利用CIFS和NFS共享文件实际涉及到两次的文件系统转换。客户端从服务器端申请一个文件时，服务器端首先从本地读出文件（本地文件系统格式），并以          NFS/CIFS的格式封装成IP报文并发送给客户端。客户端收到IP报文以后，把文件存储与本地磁盘中（本地文件系统格式）
     
     （1）CIFS面向网络连接的共享协议，对网络传输的可靠性要求高，常使用TCP/IP；NFS是独立于传输的，可使用TCP或UDP；
     （2）NFS缺点之一，是要求client必须安装专用软件；而CIFS集成在OS 内部，无需额外添加软件；
     （3）NFS属无状态协议，而CIFS属有状态协议；NFS受故障影响小，可以自恢复交互过程，CIFS不行；从传输效率上看，CIFS优于NFS，没用太多冗余信息传送
     （4）两协议都需要文件格式转换，NFS保留了unix的文件格式特性，如所有人、组等等；CIFS则完全按照win的风格来作。
     
      NFS在文件传送或信息传送过程中依赖于RPC协议

      Sun 公司需要解决的根本问题是如何将几台 UNIX 机器连接在一起，从而构成一个无缝的分布式工作环境，而不需要重新编写 UNIX 文件系统的语义，同时也	      不用添 太多分布式文件系统特有的数据结构

      apt-get install nfs-kernel-server
      

1228 YAFFS 是基于日志的文件系统，提供磨损平衡和掉电恢复的健壮性
     YAFFS中，文件是以固定大小的数据块进行存储的

--------------------------------------------------- 2011 -----------------------------------------------------------

0108 fedora network config: /etc/sysconfig/network-scripts/ifcfg-eth0
     DEVICE=eth0HWADDR=xx:xx:xx:xx:xx:xx    //MAC地址
     BOOTPROTO=noneNETMASK=255.255.255.0       //子网掩码
     IPADDR=172.17.x.x                 //IP地址
          ONBOOT=yes
     USERCTL=no
     PEERDNS=yes
     IPV6INIT=no
     NM_CONTROLLED=yes
     GATEWAY=172.17.x.254          //默认网关
     TYPE=Ethernet
     添加DNS只要在末尾添加这句
     DNS1＝     218.85.157.99
     DNS2＝202.101.98.55
     

0109 apt-get install nfs-client
     intr -- 当服务器宕机或者无法到达时，允许中断NFS请求。 
     nfsvers=2或者nfsvers=3 -- 指定使用那个版本的NFS协议。 
     nolock -- 禁用文件锁。这个设置在连接到一个旧版本的NFS服务器时偶尔会用到。 
     noexec -- 防止执行被挂接的系统上的二进制文件。这在系统通过NFS挂接一个包含有不兼容的二进制文件     的非     linux系统时是很有用的。 
     nosuid -- 禁用"设置用户标志位"（set-user-identifier）或者"设置组标志位"（set-group-identifie		r）。	这样防止远程用户运行setuid程序获得更高权限。 
	rsize=8192和wsize=8192 -- 通过设定大的同时传输的数据块大小(bytes)，以提高NFS读写的速度。改	变这些值	时要当心，一些旧的linux内核和网卡在大的块大小不能正常工作。 
	tcp -- 指定NFS使用TCP协议mount，替换UDP。 

     apt-get smbfs

APT-RPM project is a port of Debian's APT tools to a RPM based distribution (Conectiva, Red Hat, SuSE, ALT-Linux, etc). APT is an advanced package management utility front-end which allows you to easily perform package installation, upgrading and removal.

Dependencies are automatically handled, so if you try to install a package that needs others to be installed, it will download all needed packages and install them.

0111  Alsa: An audio library (and kernel level API) for Linux

0114 typedef enum {                                                                                                     
    XML_ELEMENT_NODE=   1,                                                                                         
    XML_ATTRIBUTE_NODE=   2,                                                                                       
    XML_TEXT_NODE=    3,                                                                                           
    XML_CDATA_SECTION_NODE= 4,                                                                                     
    XML_ENTITY_REF_NODE=  5,                                                                                       
    XML_ENTITY_NODE=    6,                                                                                         
    XML_PI_NODE=    7,                                                                                             
    XML_COMMENT_NODE=   8,                                                                                         
    XML_DOCUMENT_NODE=    9,                                                                                       
    XML_DOCUMENT_TYPE_NODE= 10,                                                                                    
    XML_DOCUMENT_FRAG_NODE= 11,                                                                                    
    XML_NOTATION_NODE=    12,                                                                                      
    XML_HTML_DOCUMENT_NODE= 13,                                                                                    
    XML_DTD_NODE=   14,                                                                                            
    XML_ELEMENT_DECL=   15,                                                                                        
    XML_ATTRIBUTE_DECL=   16,                                                                                      
    XML_ENTITY_DECL=    17,                                                                                        
    XML_NAMESPACE_DECL=   18,                                                                                      
    XML_XINCLUDE_START=   19,                                                                                      
    XML_XINCLUDE_END=   20                                                                                         
    #ifdef LIBXML_DOCB_ENABLED                                                                                        
   ,XML_DOCB_DOCUMENT_NODE= 21                                                                                        
    #endif                                                                                                           
} xmlElementType;            
            
0308 ^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\.[a-zA-Z0-9_-]{2,3}){1,2})$
    
*************************************************************************************
Start					regex    				Start
*************************************************************************************
元字符

现在你已经知道几个很有用的元字符了，如\b,.,*，还有\d.正则表达式里还有更多的元字符，比如\s匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等。\w匹配字母或数字或下划线或汉字等。
对中文/汉字的特殊处理是由.Net提供的正则表达式引擎支持的，其它环境下的具体情况请查看相关文档。
下面来看看更多的例子：
\ba\w*\b匹配以字母a开头的单词——先是某个单词开始处(\b)，然后是字母a,然后是任意数量的字母或数字(\w*)，最后是单词结束处(\b)。
好吧，现在我们说说正则表达式里的单词是什么意思吧：就是不少于一个的连续的\w。不错，这与学习英文时要背的成千上万个同名的东西的确关系不大 :)
\d+匹配1个或更多连续的数字。这里的+是和*类似的元字符，不同的是*匹配重复任意次(可能是0次)，而+则匹配重复1次或更多次。
\b\w{6}\b 匹配刚好6个字符的单词。
表1.常用的元字符
代码	说明
.	匹配除换行符以外的任意字符
\w	匹配字母或数字或下划线或汉字
\s	匹配任意的空白符
\d	匹配数字
\b	匹配单词的开始或结束
^	匹配字符串的开始
$	匹配字符串的结束正则表达式引擎通常会提供一个“测试指定的字符串是否匹配一个正则表达式”的方法，如JavaScript里的RegExp.test()方法或.NET里的Regex.IsMatch()方法。这里的匹配是指是字符串里有没有符合表达式规则的部分。如果不使用^和$的话，对于\d{5,12}而言，使用这样的方法就只能保证字符串里包含5到12连续位数字，而不是整个字符串就是5到12位数字。
元字符^（和数字6在同一个键位上的符号）和$都匹配一个位置，这和\b有点类似。^匹配你要用来查找的字符串的开头，$匹配结尾。这两个代码在验证输入的内容时非常有用，比如一个网站如果要求你填写的QQ号必须为5位到12位数字时，可以使用：^\d{5,12}$。
这里的{5,12}和前面介绍过的{2}是类似的，只不过{2}匹配只能不多不少重复2次，{5,12}则是重复的次数不能少于5次，不能多于12次，否则都不匹配。
因为使用了^和$，所以输入的整个字符串都要用来和\d{5,12}来匹配，也就是说整个输入必须是5到12个数字，因此如果输入的QQ号能匹配这个正则表达式的话，那就符合要求了。
和忽略大小写的选项类似，有些正则表达式处理工具还有一个处理多行的选项。如果选中了这个选项，^和$的意义就变成了匹配行的开始处和结束处。
字符转义

如果你想查找元字符本身的话，比如你查找.,或者*,就出现了问题：你没办法指定它们，因为它们会被解释成别的意思。这时你就得使用\来取消这些字符的特殊意义。因此，你应该使用\.和\*。当然，要查找\本身，你也得用\\.
例如：deerchao\.net匹配deerchao.net，C:\\Windows匹配C:\Windows。
重复

你已经看过了前面的*,+,{2},{5,12}这几个匹配重复的方式了。下面是正则表达式中所有的限定符(指定数量的代码，例如*,{5,12}等)：
表2.常用的限定符
代码/语法	说明
*	重复零次或更多次
+	重复一次或更多次
?	重复零次或一次
{n}	重复n次
{n,}	重复n次或更多次
{n,m}	重复n到m次
下面是一些使用重复的例子：
Windows\d+匹配Windows后面跟1个或更多数字
^\w+匹配一行的第一个单词(或整个字符串的第一个单词，具体匹配哪个意思得看选项设置)
字符类

要想查找数字，字母或数字，空白是很简单的，因为已经有了对应这些字符集合的元字符，但是如果你想匹配没有预定义元字符的字符集合(比如元音字母a,e,i,o,u),应该怎么办？
很简单，你只需要在方括号里列出它们就行了，像[aeiou]就匹配任何一个英文元音字母，[.?!]匹配标点符号(.或?或!)。
我们也可以轻松地指定一个字符范围，像[0-9]代表的含意与\d就是完全一致的：一位数字；同理[a-z0-9A-Z_]也完全等同于\w（如果只考虑英文的话）。
下面是一个更复杂的表达式：\(?0\d{2}[) -]?\d{8}。
“(”和“)”也是元字符，后面的分组节里会提到，所以在这里需要使用转义。
这个表达式可以匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等。我们对它进行一些分析吧：首先是一个转义字符\(,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(\d{2})，然后是)或-或空格中的一个，它出现1次或不出现(?)，最后是8个数字(\d{8})。
分枝条件

不幸的是，刚才那个表达式也能匹配010)12345678或(022-87654321这样的“不正确”的格式。要解决这个问题，我们需要用到分枝条件。正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用|把不同的规则分隔开。听不明白？没关系，看例子：
0\d{2}-\d{8}|0\d{3}-\d{7}这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)。
\(0\d{2}\)[- ]?\d{8}|0\d{2}[- ]?\d{8}这个表达式匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔。你可以试试用分枝条件把这个表达式扩展成也支持4位区号的。
\d{5}-\d{4}|\d{5}这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。之所以要给出这个例子是因为它能说明一个问题：使用分枝条件时，要注意各个条件的顺序。如果你把它改成\d{5}|\d{5}-\d{4}的话，那么就只会匹配5位的邮编(以及9位邮编的前5位)。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。
分组

我们已经提到了怎么重复单个字符（直接在字符后面加上限定符就行了）；但如果想要重复多个字符又该怎么办？你可以用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作(后面会有介绍)。
(\d{1,3}\.){3}\d{1,3}是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它：\d{1,3}匹配1到3位的数字，(\d{1,3}\.){3}匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字(\d{1,3})。
IP地址中每个数字都不能大于255，大家千万不要被《24》第三季的编剧给忽悠了……
不幸的是，它也将匹配256.300.888.999这种不可能存在的IP地址。如果能使用算术比较的话，或许能简单地解决这个问题，但是正则表达式中并不提供关于数学的任何功能，所以只能使用冗长的分组，选择，字符类来描述一个正确的IP地址：((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)。
理解这个表达式的关键是理解2[0-4]\d|25[0-5]|[01]?\d\d?，这里我就不细说了，你自己应该能分析得出来它的意义。
反义

有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到反义：
表3.常用的反义代码
代码/语法	说明
\W	匹配任意不是字母，数字，下划线，汉字的字符
\S	匹配任意不是空白符的字符
\D	匹配任意非数字的字符
\B	匹配不是单词开头或结束的位置
[^x]	匹配除了x以外的任意字符
[^aeiou]	匹配除了aeiou这几个字母以外的任意字符
例子：\S+匹配不包含空白符的字符串。
<a[^>]+>匹配用尖括号括起来的以a开头的字符串。
后向引用

使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。
呃……其实,组号分配还不像我刚说得那么简单：
分组0对应整个正则表达式
实际上组号分配过程是要从左向右扫描两遍的：第一遍只给未命名组分配，第二遍只给命名组分配－－因此所有命名组的组号都大于未命名的组号
你可以使用(?:exp)这样的语法来剥夺一个分组对组号分配的参与权．
后向引用用于重复搜索前面某个分组匹配的文本。例如，\1代表分组1匹配的文本。难以理解？请看示例：
\b(\w+)\b\s+\1\b可以用来匹配重复的单词，像go go, 或者kitty kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字(\b(\w+)\b)，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符(\s+)，最后是分组1中捕获的内容（也就是前面匹配的那个单词）(\1)。
你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：(?<Word>\w+)(或者把尖括号换成'也行：(?'Word'\w+)),这样就把\w+的组名指定为Word了。要反向引用这个分组捕获的内容，你可以使用\k<Word>,所以上一个例子也可以写成这样：\b(?<Word>\w+)\b\s+\k<Word>\b。
使用小括号的时候，还有很多特定用途的语法。下面列出了最常用的一些：
表4.常用分组语法
分类	代码/语法	说明
捕获	(exp)	匹配exp,并捕获文本到自动命名的组里
(?<name>exp)	匹配exp,并捕获文本到名称为name的组里，也可以写成(?'name'exp)
(?:exp)	匹配exp,不捕获匹配的文本，也不给此分组分配组号
零宽断言	(?=exp)	匹配exp前面的位置
(?<=exp)	匹配exp后面的位置
(?!exp)	匹配后面跟的不是exp的位置
(?<!exp)	匹配前面不是exp的位置
注释	(?#comment)	这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读
我们已经讨论了前两种语法。第三个(?:exp)不会改变正则表达式的处理方式，只是这样的组匹配的内容不会像前两种那样被捕获到某个组里面，也不会拥有组号。“我为什么会想要这样做？”——好问题，你觉得为什么呢？
零宽断言

地球人，是不是觉得这些术语名称太复杂，太难记了？我也有同感。知道有这么一种东西就行了，它叫什么，随它去吧！人若无名，便可专心练剑；物若无名，便可随意取舍……
接下来的四个用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们像\b,^,$那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为零宽断言。最好还是拿例子来说明吧：
断言用来声明一个应该为真的事实。正则表达式中只有当断言为真时才会继续进行匹配。
(?=exp)也叫零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。比如\b\w+(?=ing\b)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找I'm singing while you're dancing.时，它会匹配sing和danc。
(?<=exp)也叫零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp。比如(?<=\bre)\w+\b会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找reading a book时，它匹配ading。
假如你想要给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分：((?<=\d)\d{3})+\b，用它对1234567890进行查找时结果是234567890。
下面这个例子同时使用了这两种断言：(?<=\s)\d+(?=\s)匹配以空白符间隔的数字(再次强调，不包括这些空白符)。
负向零宽断言

前面我们提到过怎么查找不是某个字符或不在某个字符类里的字符的方法(反义)。但是如果我们只是想要确保某个字符没有出现，但并不想去匹配它时怎么办？例如，如果我们想查找这样的单词--它里面出现了字母q,但是q后面跟的不是字母u,我们可以尝试这样：
\b\w*q[^u]\w*\b匹配包含后面不是字母u的字母q的单词。但是如果多做测试(或者你思维足够敏锐，直接就观察出来了)，你会发现，如果q出现在单词的结尾的话，像Iraq,Benq，这个表达式就会出错。这是因为[^u]总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的[^u]将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的\w*\b将会匹配下一个单词，于是\b\w*q[^u]\w*\b就能匹配整个Iraq fighting。负向零宽断言能解决这样的问题，因为它只匹配一个位置，并不消费任何字符。现在，我们可以这样来解决这个问题：\b\w*q(?!u)\w*\b。
零宽度负预测先行断言(?!exp)，断言此位置的后面不能匹配表达式exp。例如：\d{3}(?!\d)匹配三位数字，而且这三位数字的后面不能是数字；\b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。
同理，我们可以用(?<!exp),零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp：(?<![a-z])\d{7}匹配前面不是小写字母的七位数字。
请详细分析表达式(?<=<(\w+)>).*(?=<\/\1>)，这个表达式最能表现零宽断言的真正用途。
一个更复杂的例子：(?<=<(\w+)>).*(?=<\/\1>)匹配不包含属性的简单HTML标签内里的内容。(?<=<(\w+)>)指定了这样的前缀：被尖括号括起来的单词(比如可能是<b>)，然后是.*(任意的字符串),最后是一个后缀(?=<\/\1>)。注意后缀里的\/，它用到了前面提过的字符转义；\1则是一个反向引用，引用的正是捕获的第一组，前面的(\w+)匹配的内容，这样如果前缀实际上是<b>的话，后缀就是</b>了。整个表达式匹配的是<b>和</b>之间的内容(再次提醒，不包括前缀和后缀本身)。
注释

小括号的另一种用途是通过语法(?#comment)来包含注释。例如：2[0-4]\d(?#200-249)|25[0-5](?#250-255)|[01]?\d\d?(?#0-199)。
要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。例如，我们可以前面的一个表达式写成这样：
      (?<=    # 断言要匹配的文本的前缀
      <(\w+)> # 查找尖括号括起来的字母或数字(即HTML/XML标签)
      )       # 前缀结束
      .*      # 匹配任意文本
      (?=     # 断言要匹配的文本的后缀
      <\/\1>  # 查找尖括号括起来的内容：前面是一个"/"，后面是先前捕获的标签
      )       # 后缀结束
贪婪与懒惰

当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。以这个表达式为例：a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。
有时，我们更需要懒惰匹配，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样.*?就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。现在看看懒惰版的例子吧：
a.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。
为什么第一个匹配是aab（第一到第三个字符）而不是ab（第二到第三个字符）？简单地说，因为正则表达式有另一条规则，比懒惰／贪婪规则的优先级更高：最先开始的匹配拥有最高的优先权——The match that begins earliest wins。
表5.懒惰限定符
代码/语法	说明
*?	重复任意次，但尽可能少重复
+?	重复1次或更多次，但尽可能少重复
??	重复0次或1次，但尽可能少重复
{n,m}?	重复n到m次，但尽可能少重复
{n,}?	重复n次以上，但尽可能少重复
处理选项

在C#中，你可以使用Regex(String, RegexOptions)构造函数来设置正则表达式的处理选项。如：Regex regex = new Regex(@"\ba\w{6}\b", RegexOptions.IgnoreCase);
上面介绍了几个选项如忽略大小写，处理多行等，这些选项能用来改变处理正则表达式的方式。下面是.Net中常用的正则表达式选项：
表6.常用的处理选项
名称	说明
IgnoreCase(忽略大小写)	匹配时不区分大小写。
Multiline(多行模式)	更改^和$的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。(在此模式下,$的精确含意是:匹配\n之前的位置以及字符串结束前的位置.)
Singleline(单行模式)	更改.的含义，使它与每一个字符匹配（包括换行符\n）。
IgnorePatternWhitespace(忽略空白)	忽略表达式中的非转义空白并启用由#标记的注释。
ExplicitCapture(显式捕获)	仅捕获已被显式命名的组。
一个经常被问到的问题是：是不是只能同时使用多行模式和单行模式中的一种？答案是：不是。这两个选项之间没有任何关系，除了它们的名字比较相似（以至于让人感到疑惑）以外。
平衡组/递归匹配

这里介绍的平衡组语法是由.Net Framework支持的；其它语言／库不一定支持这种功能，或者支持此功能但需要使用不同的语法。
有时我们需要匹配像( 100 * ( 50 + 15 ) )这样的可嵌套的层次性结构，这时简单地使用\(.+\)则只会匹配到最左边的左括号和最右边的右括号之间的内容(这里我们讨论的是贪婪模式，懒惰模式也有下面的问题)。假如原来的字符串里的左括号和右括号出现的次数不相等，比如( 5 / ( 3 + 2 ) ) )，那我们的匹配结果里两者的个数也不会相等。有没有办法在这样的字符串里匹配到最长的，配对的括号之间的内容呢？
为了避免(和\(把你的大脑彻底搞糊涂，我们还是用尖括号代替圆括号吧。现在我们的问题变成了如何把xx <aa <bbb> <bbb> aa> yy这样的字符串里，最长的配对的尖括号内的内容捕获出来？
这里需要用到以下的语法构造：
(?'group') 把捕获的内容命名为group,并压入堆栈(Stack)
(?'-group') 从堆栈上弹出最后压入堆栈的名为group的捕获内容，如果堆栈本来为空，则本分组的匹配失败
(?(group)yes|no) 如果堆栈上存在以名为group的捕获内容的话，继续匹配yes部分的表达式，否则继续匹配no部分
(?!) 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败
如果你不是一个程序员（或者你自称程序员但是不知道堆栈是什么东西），你就这样理解上面的三种语法吧：第一个就是在黑板上写一个"group"，第二个就是从黑板上擦掉一个"group"，第三个就是看黑板上写的还有没有"group"，如果有就继续匹配yes部分，否则就匹配no部分。
我们需要做的是每碰到了左括号，就在压入一个"Open",每碰到一个右括号，就弹出一个，到了最后就看看堆栈是否为空－－如果不为空那就证明左括号比右括号多，那匹配就应该失败。正则表达式引擎会进行回溯(放弃最前面或最后面的一些字符)，尽量使整个表达式得到匹配。
<                         #最外层的左括号
    [^<>]*                #最外层的左括号后面的不是括号的内容
    (
        (
            (?'Open'<)    #碰到了左括号，在黑板上写一个"Open"
            [^<>]*       #匹配左括号后面的不是括号的内容
        )+
        (
            (?'-Open'>)   #碰到了右括号，擦掉一个"Open"
            [^<>]*        #匹配右括号后面不是括号的内容
        )+
    )*
    (?(Open)(?!))         #在遇到最外层的右括号前面，判断黑板上还有没有没擦掉的"Open"；如果还有，则匹配失败

>                         #最外层的右括号
平衡组的一个最常见的应用就是匹配HTML,下面这个例子可以匹配嵌套的<div>标签：<div[^>]*>[^<>]*(((?'Open'<div[^>]*>)[^<>]*)+((?'-Open'</div>)[^<>]*)+)*(?(Open)(?!))</div>.
还有些什么东西没提到

上边已经描述了构造正则表达式的大量元素，但是还有很多没有提到的东西。下面是一些未提到的元素的列表，包含语法和简单的说明。你可以在网上找到更详细的参考资料来学习它们--当你需要用到它们的时候。如果你安装了MSDN Library,你也可以在里面找到.net下正则表达式详细的文档。
这里的介绍很简略，如果你需要更详细的信息，而又没有在电脑上安装MSDN Library,可以查看关于正则表达式语言元素的MSDN在线文档。
表7.尚未详细讨论的语法
代码/语法	说明
\a	报警字符(打印它的效果是电脑嘀一声)
\b	通常是单词分界位置，但如果在字符类里使用代表退格
\t	制表符，Tab
\r	回车
\v	竖向制表符
\f	换页符
\n	换行符
\e	Escape
\0nn	ASCII代码中八进制代码为nn的字符
\xnn	ASCII代码中十六进制代码为nn的字符
\unnnn	Unicode代码中十六进制代码为nnnn的字符
\cN	ASCII控制字符。比如\cC代表Ctrl+C
\A	字符串开头(类似^，但不受处理多行选项的影响)
\Z	字符串结尾或行尾(不受处理多行选项的影响)
\z	字符串结尾(类似$，但不受处理多行选项的影响)
\G	当前搜索的开头
\p{name}	Unicode中命名为name的字符类，例如\p{IsGreek}
(?>exp)	贪婪子表达式
(?<x>-<y>exp)	平衡组
(?im-nsx:exp)	在子表达式exp中改变处理选项
(?im-nsx)	为表达式后面的部分改变处理选项
(?(exp)yes|no)	把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no
(?(exp)yes)	同上，只是使用空表达式作为no
(?(name)yes|no)	如果命名为name的组捕容，使用yes作为表达式；否则使用no
(?(name)yes)	同上，只是使用空表达式作为no

*************************************************************************************
End					regex    				  End
*************************************************************************************

0310
     Idles, timeouts, and input functions from GLib, such as g_idle_add(), are executed outside of the main GTK+      lock. So, if you need to call GTK+ inside of such a callback, you must surround the callback with a      gdk_threads_enter()/gdk_threads_leave() pair or use gdk_threads_add_idle_full() which does this for you.      However,      event dispatching from the mainloop is still executed within the main GTK+ lock, so callback functions connected      to event signals like GtkWidget::button-press-event, do not need thread protection.


0311 
     Initializes GDK so that it can be used from multiple threads in conjunction with gdk_threads_enter() and              gdk_threads_leave(). g_thread_init() must be called previous to this function. 
     This call must be made before any use of the main loop from GTK+; to be safe, call it before gtk_init(). 
     

0316
     Fügen Sie ein Debian-Backports-Archiv zu /etc/apt/sources.list hinzu, verwenden Sie auch den "non-free"-Komponenten. Beispiel: 

# Backported packages for Debian Lenny
deb http://backports.debian.org/debian-backports lenny-backports main contrib non-freeFühren Sie ein Update der Liste und der Pakete durch: 

aptitude updateInstallieren Sie einen für Ihr System geeigneten 2.6.32 Kernel zusammen mit den lenny-backports/firmware-ralink und den wireless-tools Paketen. 

 ACHTUNG: Führen Sie dringend ein Backup Ihrer Dateien für der Installation des neuen Kernels durch! Während der Installation des neuen Kernels werden Sie nach der bevorzugten Kommandozeile für System gefragt. Es ist vielleicht ratsam nicht sh sondern bash zu nehmen (diverse Vorfälle in der Vergangenheit). 

Beispiel: 

aptitude -t lenny-backports install linux-image-2.6-$(uname -r | sed 's,.*-,,') firmware-ralink wireless-toolsSetzen Sie den alten Treiber rt2800usb auf die Blacklist, damit rt2870sta nicht am Ausführen gehindert wird: 

echo "blacklist rt2800usb" >> /etc/modprobe.d/blacklistStarten Sie Ihr System neu und booten Sie von dem 32er-Kernel. Anschließend verbinden Sie Ihren Laptop oder Computer mit dem jeweiligem Gerät. 
Die notwendigen Kernel-Module sollten automatisch geladen werden. Falls dies nicht zutrifft kann das Modul mit dem folgendem Befehl manuell geladen werden: 

modprobe rt2870staDer 32er-Kernel von Debian verfügt über einen Netzwerk-Manager, der das einfache Verbinden über eine graphische Benutzeroberfläche mit (W)LAN-Netzwerken gewährleistet. Sollte dies nicht der Fall sein, so können Sie mit dem folgendem Befehl den Netzwerk-Manager installieren: 

aptitude install network-manager




