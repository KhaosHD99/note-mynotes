1 g_object_unref ()
  void                g_object_unref                      (gpointer object);Decreases the reference count of object.   When its reference count drops to 0, the object is finalized (i.e. its memory is freed). 

//gdk_display_warp_pointer(display, screen, x + 12, y + 12); 



guint keyval = GDK_Tab;
	GdkKeymapKey* keys;
	gint n_keys;
	GdkEvent* gdk_event = gdk_event_new(GDK_KEY_PRESS);
	    	
			((GdkEventKey*)gdk_event)->window = fixed->window;
		    ((GdkEventKey*)gdk_event)->send_event = TRUE;
		    ((GdkEventKey*)gdk_event)->time = GDK_CURRENT_TIME;
		    ((GdkEventKey*)gdk_event)->state = GDK_KEY_PRESS_MASK;
		    ((GdkEventKey*)gdk_event)->keyval = GDK_3270_BackTab;
			gdk_event_put(gdk_event);

gdk_window_get_origin
char varray +=

g_object_set(web_view,
 	     "full-content-zoom", TRUE,					
             NULL);

#define _(STRING) g_convert(STRING, -1, "UTF-8", "GB2312", NULL, NULL, NULL)	

typedef enum {
    WEBKIT_NAVIGATION_RESPONSE_ACCEPT,
    WEBKIT_NAVIGATION_RESPONSE_IGNORE,
    WEBKIT_NAVIGATION_RESPONSE_DOWNLOAD
} WebKitNavigationResponse;


0527 
     
     F3:  ffc0
     
     F5:  ffc2
     F6:  ffc3
     F7:  ffc4
     F8:  ffc5
     F9:  ffc6
     F10: ffc7
     F11: ffc8
     F12: ffc9
          1008ff81

     fn + left:   1008ff11
     fn + right:  1008ff13 
          up:     1008ff02
          donw:   1008ff03
     
WEBKIT_WEB_VIEW		
  gtk_widget_get_parent
     gtk_p	rogress_bar_set_text 

 
gtk_label_set_line_wrap ()
void                gtk_label_set_line_wrap             (GtkLabel *label,
                                                         gboolean wrap);
Toggles line wrapping within the GtkLabel widget. TRUE makes it break lines if text exceeds the widget's size. FALSE lets the text get cut off by the edge of the widget if it exceeds the widget size. 

Note that setting line wrapping to TRUE does not make the label wrap at its parent container's width, because GTK+ widgets conceptually can't make their requisition depend on the parent container's size. For a label that wraps at a specific position, set the label's width using gtk_widget_set_size_request().








On lun, 2005-01-17 at 10:24 +0100, Andreas Madsack wrote:
> I can hide them with gtk_widget_hide(..), but how can I get the pointer?
> Hiding is nice, but delete an element would be perfect.
This is a list of all children of the menu:
GTK_MENU_SHELL(menu)->children

It is read-only, so you're only allowed to hide the widget and not
remove to it.


gdk_window_get_origin(eventbox_home->window, &x, &y);



GDK_INTERP_NEAREST Nearest neighbor sampling; this is the fastest and lowest quality mode. Quality is normally unacceptable when scaling down, but may be OK when scaling up.  
GDK_INTERP_TILES This is an accurate simulation of the PostScript image operator without any interpolation enabled. Each pixel is rendered as a tiny parallelogram of solid color, the edges of which are implemented with antialiasing. It resembles nearest neighbor for enlargement, and bilinear for reduction.  
GDK_INTERP_BILINEAR Best quality/speed balance; use this mode by default. Bilinear interpolation. For enlargement, it is equivalent to point-sampling the ideal bilinear-interpolated image. For reduction, it is equivalent to laying down small tiles and integrating over the coverage area.  
GDK_INTERP_HYPER This is the slowest and highest quality reconstruction function. It is derived from the hyperbolic filters in Wolberg's "Digital Image Warping", and is formally defined as the hyperbolic-filter sampling the ideal hyperbolic-filter interpolated image (the filter is designed to be idempotent for 1:1 pixel mapping).  


scaled_pixbuf = gdk_pixbuf_scale_simple(pixbuf,
											 width,
											 height,
											 GDK_INTERP_NEAREST);









#if 1
gboolean set_background_pixmap(const gchar *filename, GtkWidget *widget, int width, int height)
{	
	GdkPixbuf *scaled_pixbuf = NULL;
	GdkPixbuf *pbuf = NULL;
	GdkPixmap *pixmap = NULL;
	GdkBitmap *bitmap = NULL;
	
	gint img_width, img_height;

	if(GTK_WIDGET_NO_WINDOW(widget))
	{	
		printf("**************** The widget has not window !\n");   
		return FALSE; 
	}
	
	if(!GTK_WIDGET_REALIZED(widget))
	{
		gtk_widget_realize(widget);
	}

	if(!filename)
	{	
		gdk_window_set_back_pixmap(widget->window, NULL, FALSE);
		printf("filename NULL ! \n");  
		return FALSE;
	}	
	
	pbuf = gdk_pixbuf_new_from_file(filename, NULL);
	if(!pbuf)
	{
		printf("gdk_pixbuf_new_from_file failed ! \n");  
		return FALSE;
	}
	img_width = gdk_pixbuf_get_width(pbuf);
	img_height = gdk_pixbuf_get_height(pbuf);
	//showDebug("img_width : %d, ------- img_height : %d \n", img_width, img_height);
	
	gint drawable_width, drawable_height;
	if(width<=0 || height<=0)
	{
		gdk_drawable_get_size(widget->window, &drawable_width, &drawable_height);
		//showDebug("drawable_width : %d, ------- drawable_height : %d \n", drawable_width, drawable_height);	
	}
	else
	{
		drawable_width = width;
		drawable_height = height;
		//showDebug("width : %d, ------- height : %d \n", width, height);	
	}
	
	double scale_x, scale_y;
	if(img_width>0 && img_height>0)
	{
		scale_x = (double)drawable_width/img_width;
		scale_y = (double)drawable_height/img_height;
	}
	else
	{
		scale_x = 1.0;
		scale_y = 1.0;
	}	
	//showDebug("scale_x : %f, ------- scale_y : %f \n", scale_x, scale_y);	
	
	scaled_pixbuf = gdk_pixbuf_new(GDK_COLORSPACE_RGB, 
						TRUE,
	       				gdk_pixbuf_get_bits_per_sample(pbuf), 
	       				drawable_width, 
	       				drawable_height);
	gdk_pixbuf_fill(scaled_pixbuf, 0);
	gdk_pixbuf_composite(pbuf, scaled_pixbuf,
						 0, 0,
						 drawable_width, drawable_height, 
						 0, 0,
						 scale_x, scale_y,
						 GDK_INTERP_BILINEAR, 0xFF);
	pixmap = gdk_pixmap_new(widget->window, drawable_width, drawable_height, -1);
	gdk_draw_pixbuf(pixmap, NULL, scaled_pixbuf, 0, 0, 0, 0, -1, -1, GDK_RGB_DITHER_NORMAL, 1, 1);
	
	gdk_draw_drawable(widget->window, 
					  widget->style->fg_gc[GTK_WIDGET_STATE(widget)],
					  pixmap,
					  0, 0,
					  0, 0,
					  drawable_width, drawable_height);

	gtk_widget_set_app_paintable(widget, TRUE);
	gdk_pixbuf_render_pixmap_and_mask(scaled_pixbuf, &pixmap, &bitmap, 128);
	gtk_widget_shape_combine_mask(widget, bitmap, 0, 0);
	gdk_window_set_back_pixmap(widget->window, pixmap, FALSE);
	gtk_widget_queue_draw(widget);

	if(scaled_pixbuf)
	{
		gdk_pixbuf_unref(scaled_pixbuf);
		scaled_pixbuf = NULL;
	}
	if(pbuf)
	{	
		gdk_pixbuf_unref(pbuf);
		pbuf = NULL;
	}	
	if(pixmap)
	{	
		gdk_pixmap_unref(pixmap);
		pixmap = NULL;
	}	
	if(bitmap)
	{
		gdk_bitmap_unref(bitmap);
		bitmap = NULL;
	}
	
	return TRUE;
}
#endif












	#if 0//BG Image
	GtkWidget *bg_image = NULL;
	GdkPixbuf *pixbuf = NULL;
	GdkPixmap *bg_pixmap = NULL;
	GdkBitmap *bg_bitmap = NULL;
	char img_path[128];

	snprintf(img_path, sizeof(img_path), "%s%s", RESOURCE_APP_FILE_PATH IMAGE_DIR, 
												 IMG_BROWSER_ADDTO_BOOKMARK_BG);		
	
	pixbuf = create_gtk_pixbuf(img_path, DIALOG_SIZE_WIDTH, DIALOG_SIZE_HEIGHT, NULL, 14);	
	bg_image = GTK_IMAGE(gtk_image_new_from_pixbuf(pixbuf));
	if(G_IS_OBJECT(pixbuf))
		g_object_unref(pixbuf);
	
	gdk_pixbuf_render_pixmap_and_mask(gtk_image_get_pixbuf(GTK_IMAGE(bg_image)), &bg_pixmap, 
																				 &bg_bitmap, 128);
	gtk_widget_shape_combine_mask(dialog, bg_bitmap, 0, 0);

	gtk_widget_realize (dialog);
	/*------------------ Set Irregular Window --------------------*/
	gdk_window_set_back_pixmap(dialog->window, bg_pixmap, FALSE);
	gtk_widget_show(bg_image);
	#endif


-------------------------------------------------------------------------------------------------
gtk_dialog_run ()

gint                gtk_dialog_run                      (GtkDialog *dialog);
Blocks in a recursive main loop until the dialog either emits the "response" signal, or is destroyed. If the dialog is destroyed during the call to gtk_dialog_run(), gtk_dialog_run() returns GTK_RESPONSE_NONE. Otherwise, it returns the response ID from the ::response signal emission.

Before entering the recursive main loop, gtk_dialog_run() calls gtk_widget_show() on the dialog for you. Note that you still need to show any children of the dialog yourself.

During gtk_dialog_run(), the default behavior of "delete-event" is disabled; if the dialog receives ::delete_event, it will not be destroyed as windows usually are, and gtk_dialog_run() will return GTK_RESPONSE_DELETE_EVENT. Also, during gtk_dialog_run() the dialog will be modal. You can force gtk_dialog_run() to return at any time by calling gtk_dialog_response() to emit the ::response signal. Destroying the dialog during gtk_dialog_run() is a very bad idea, because your post-run code won't know whether the dialog was destroyed or not.

After gtk_dialog_run() returns, you are responsible for hiding or destroying the dialog if you wish to do so.

Typical usage of this function might be:

  gint result = gtk_dialog_run (GTK_DIALOG (dialog));
  switch (result)
    {
      case GTK_RESPONSE_ACCEPT:
         do_application_specific_something ();
         break;
      default:
         do_nothing_since_dialog_was_cancelled ();
         break;
    }
  gtk_widget_destroy (dialog);
Note that even though the recursive main loop gives the effect of a modal dialog (it prevents the user from interacting with other windows in the same window group while the dialog is run), callbacks such as timeouts, IO channel watches, DND drops, etc, will be triggered during a gtk_dialog_run() call.

dialog :

a GtkDialog
Returns :

response ID


---------------------------
typedef enum
{
  GTK_JUSTIFY_LEFT,
  GTK_JUSTIFY_RIGHT,
  GTK_JUSTIFY_CENTER,
  GTK_JUSTIFY_FILL
} GtkJustification;

---------------------------
//gtk_window_set_transient_for (GTK_WINDOW(addto_bookmark_window), GTK_WINDOW(window));
	//gtk_window_set_modal(GTK_WINDOW(addto_bookmark_window), TRUE);


gtk_label_set_line_wrap(GTK_LABEL(label), TRUE);
gtk_label_set_line_wrap_mode(GTK_LABEL(label), PANGO_WRAP_CHAR);



typedef enum {
    WEBKIT_WEB_NAVIGATION_REASON_LINK_CLICKED,
    WEBKIT_WEB_NAVIGATION_REASON_FORM_SUBMITTED,
    WEBKIT_WEB_NAVIGATION_REASON_BACK_FORWARD,
    WEBKIT_WEB_NAVIGATION_REASON_RELOAD,
    WEBKIT_WEB_NAVIGATION_REASON_FORM_RESUBMITTED,
    WEBKIT_WEB_NAVIGATION_REASON_OTHER,
} WebKitWebNavigationReason;


typedef enum {
	SOUP_HTTP_1_0 = 0, /*< nick=http-1-0 >*/
	SOUP_HTTP_1_1 = 1  /*< nick=http-1-1 >*/
} SoupHTTPVersion;


typedef enum {
	SOUP_MESSAGE_NO_REDIRECT          = (1 << 1),
#ifndef LIBSOUP_DISABLE_DEPRECATED
	SOUP_MESSAGE_OVERWRITE_CHUNKS     = (1 << 3),
#endif
	SOUP_MESSAGE_CONTENT_DECODED      = (1 << 4),
	SOUP_MESSAGE_CERTIFICATE_TRUSTED  = (1 << 5)
} SoupMessageFlags;



typedef enum {
  G_TLS_CERTIFICATE_UNKNOWN_CA    = (1 << 0),
  G_TLS_CERTIFICATE_BAD_IDENTITY  = (1 << 1),
  G_TLS_CERTIFICATE_NOT_ACTIVATED = (1 << 2),
  G_TLS_CERTIFICATE_EXPIRED       = (1 << 3),
  G_TLS_CERTIFICATE_REVOKED       = (1 << 4),
  G_TLS_CERTIFICATE_INSECURE      = (1 << 5),
  G_TLS_CERTIFICATE_GENERIC_ERROR = (1 << 6),

  G_TLS_CERTIFICATE_VALIDATE_ALL  = 0x007f
} GTlsCertificateFlags;


typedef enum {
	SOUP_MEMORY_STATIC,
	SOUP_MEMORY_TAKE,
	SOUP_MEMORY_COPY,
	SOUP_MEMORY_TEMPORARY
} SoupMemoryUse;

-----------------------------------------------------------------
The "navigation-policy-decision-requested" signal
gboolean            user_function                      (WebKitWebView             *webView,
                                                        WebKitWebFrame            *frame,
                                                        WebKitNetworkRequest      *request,
                                                        WebKitWebNavigationAction *navigation_action,
                                                        WebKitWebPolicyDecision   *policy_decision,
                                                        gpointer                   user_data)              : Run Last
Emitted when frame requests a navigation to another page. If this signal is not handled, the default behavior is to allow the navigation. 

Notice that if you return TRUE, meaning that you handled the signal, you are expected to have decided what to do, by calling webkit_web_policy_decision_ignore(), webkit_web_policy_decision_use(), or webkit_web_policy_decision_download() on the policy_decision object. 




-------------------------------------------------------------------------------------------------
The "resource-request-starting" signal
void                user_function                      (WebKitWebView         *webView,
                                                        WebKitWebFrame        *web_frame,
                                                        WebKitWebResource     *web_resource,
                                                        WebKitNetworkRequest  *request,
                                                        WebKitNetworkResponse *response,
                                                        gpointer               user_data)         : Action
Emitted when a request is about to be sent. You can modify the request while handling this signal. You can set the URI in the WebKitNetworkRequest object itself, and add/remove/replace headers using the SoupMessage object it carries, if it is present. See webkit_network_request_get_message(). Setting the request URI to "about:blank" will effectively cause the request to load nothing, and can be used to disable the loading of specific resources. 

Notice that information about an eventual redirect is available in response's SoupMessage, not in the SoupMessage carried by the request. If response is NULL, then this is not a redirected request. 

The WebKitWebResource object will be the same throughout all the lifetime of the resource, but the contents may change from inbetween signal emissions. 

webView :
 the object which received the signal 
web_frame :
 the WebKitWebFrame whose load dispatched this request 
web_resource :
 an empty WebKitWebResource object 
request :
 the WebKitNetworkRequest that will be dispatched 
response :
 the WebKitNetworkResponse representing the redirect response, if any 
user_data :
 user data set when the signal handler was connected. 



typedef enum {
    WEBKIT_CACHE_MODEL_DEFAULT,
    WEBKIT_CACHE_MODEL_DOCUMENT_VIEWER,
    WEBKIT_CACHE_MODEL_WEB_BROWSER,
    WEBKIT_CACHE_MODEL_DOCUMENT_BROWSER,
} WebKitCacheModel;


