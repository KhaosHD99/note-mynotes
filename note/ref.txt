Enum xmlParserOption {
    XML_PARSE_RECOVER = 1 : recover on errors
    XML_PARSE_NOENT = 2 : substitute entities
    XML_PARSE_DTDLOAD = 4 : load the external subset
    XML_PARSE_DTDATTR = 8 : default DTD attributes
    XML_PARSE_DTDVALID = 16 : validate with the DTD
    XML_PARSE_NOERROR = 32 : suppress error reports
    XML_PARSE_NOWARNING = 64 : suppress warning reports
    XML_PARSE_PEDANTIC = 128 : pedantic error reporting
    XML_PARSE_NOBLANKS = 256 : remove blank nodes
    XML_PARSE_SAX1 = 512 : use the SAX1 interface internally
    XML_PARSE_XINCLUDE = 1024 : Implement XInclude substitition
    XML_PARSE_NONET = 2048 : Forbid network access
    XML_PARSE_NODICT = 4096 : Do not reuse the context dictionnary
    XML_PARSE_NSCLEAN = 8192 : remove redundant namespaces declarations
    XML_PARSE_NOCDATA = 16384 : merge CDATA as text nodes
    XML_PARSE_NOXINCNODE = 32768 : do not generate XINCLUDE START/END nodes
    XML_PARSE_COMPACT = 65536 : compact small text nodes; no modification of the tree allowed afterwards (will possibly crash if you try to modify the tree)
    XML_PARSE_OLD10 = 131072 : parse using XML-1.0 before update 5
    XML_PARSE_NOBASEFIX = 262144 : do not fixup XINCLUDE xml:base uris
    XML_PARSE_HUGE = 524288 : relax any hardcoded limit from the parser
    XML_PARSE_OLDSAX = 1048576 : parse using SAX2 interface from before 2.7.0
}

Enum xmlElementType {
    XML_ELEMENT_NODE = 1
    XML_ATTRIBUTE_NODE = 2
    XML_TEXT_NODE = 3
    XML_CDATA_SECTION_NODE = 4
    XML_ENTITY_REF_NODE = 5
    XML_ENTITY_NODE = 6
    XML_PI_NODE = 7
    XML_COMMENT_NODE = 8
    XML_DOCUMENT_NODE = 9
    XML_DOCUMENT_TYPE_NODE = 10
    XML_DOCUMENT_FRAG_NODE = 11
    XML_NOTATION_NODE = 12
    XML_HTML_DOCUMENT_NODE = 13
    XML_DTD_NODE = 14
    XML_ELEMENT_DECL = 15
    XML_ATTRIBUTE_DECL = 16
    XML_ENTITY_DECL = 17
    XML_NAMESPACE_DECL = 18
    XML_XINCLUDE_START = 19
    XML_XINCLUDE_END = 20
    XML_DOCB_DOCUMENT_NODE = 21
}

Structure xmlNodestruct _xmlNode
{
    void *	_private	: application data
    xmlElementType	type	: type number, must be second !
    const xmlChar *	name	: the name of the node, or the entity
    struct _xmlNode *	children	: parent->childs link
    struct _xmlNode *	last	: last child link
    struct _xmlNode *	parent	: child->parent link
    struct _xmlNode *	next	: next sibling link
    struct _xmlNode *	prev	: previous sibling link
    struct _xmlDoc *	doc	: the containing document End of common p
    xmlNs *	ns	: pointer to the associated namespace
    xmlChar *	content	: the content
    struct _xmlAttr *	properties	: properties list
    xmlNs *	nsDef	: namespace definitions on this node
    void *	psvi	: for type/PSVI informations
    unsigned short	line	: line number
    unsigned short	extra	: extra data for XPath/XSLT

}



bash shell快捷键

Ctrl+p重复上一次命令 
Ctrl+a跳到第一个字符前 
Ctrl+x同上但再按一次会从新回到原位置 
Ctrl+b前移一个字符不删除字符情况下 
Ctrl+h删除前一个字符 
Ctrl+u删除提示符前的所有字符 
Ctrl+w同上 
Ctrl+d删除提示符后一个字符或exit或logout 
Ctrl+e转到字符尾部 
Ctrl+f后移一个字符 
Ctrl+k删除提示符后全部字符 
Ctrl+k取消 
ctrl+r向前查找用过的命令
Ctrl+o Ctrl+y Ctrl+i Crtl+m这4个没搞清楚怎么用
<TAB> 命令补齐
CTRL-I 等同于按制表符<TAB>键
CTRL-W 不是删除光标前的所有字符, 它删除光标前的一个单词
CTRL-P 是recall出上一个命令 <===> CTRL-N 是recall出下一个命令
ESC-F 光标向前步进一个单词
ESC-B 光标向后步进一个单词
CTRL-M 等同于回车键
CTRL-O 等同于回车键
CTRL-V 使下一个特殊字符可以插入在当前位置, 如CTRL-V <TAB> 可以在当前位置插入一个<TAB>字符, 其ASCII是9, 否则一般情况下按<TAB>结果是命令补齐
CTRL-C 撤消当前命令行的编辑, 另起一行.
CTRL-S 暂时冻结当前shell的输入
CTRL-Q 解冻
ESC-c 使下一个单词首字母大写, 同时光标前进一个单词, 如光标停留在单词的某个字母上, 如word中的o字母上, 则o字母变大写. 而不是w
ESC-u 使下一个单词所有字母变大写, 同时光标前进一个单词, 同上, 如光标在o字母上, 则ord变大写, w不变.
ESC-l 同ESC-U, 但使之全变为小写. 
把bash所有的ctrl组合键试了一遍，现总结如下(以下出现的所有键都是ctrl组合键)：

1. U K Y
U将光标（不包括）以前的字符删除
K将光标（包括）以后的字符删除
Y将刚才删除的字符粘出来

2. D H
D将光标处的字符删除
H将光标前的一个字符删除

3. A E
A将光标移动到行首
E将光标移动到行尾

4. F B
F将光标向右移动一个字符的位置
B将光标向左移动一个字符的位置

5. N P
N下一个命令
P上一个命令

6. L
L清屏

7. R
R搜索以前输入过的命令

8. T
T将光标处的字符和光标前一个字符替换位置

基本功:
用上下键看命令的历史
左右键区修改内容
tab补齐命令名字或者目录，文件名字，不是唯一的多按2次，会出来列表
!ls 重复运行最后一条以’ls’开头的命令，如果先ls -l 然后ls -lcrt，那么!ls，相当于ls -lcrt
ls abc.txt
vi !$

第二行的vi !$相当于vi abc.txt，!$等于上一个命令的参数， ‘$’ 是根据上下文来说的最后一行，列等。

ctrl键组合
ctrl+a:光标移到行首。
ctrl+b:光标左移一个字母
ctrl+c:杀死当前进程。
ctrl+d:退出当前 Shell。
ctrl+e:光标移到行尾。
ctrl+h:删除光标前一个字符，同 backspace 键相同。
ctrl+k:清除光标后至行尾的内容。
ctrl+l:清屏，相当于clear。
ctrl+r:搜索之前打过的命令。会有一个提示，根据你输入的关键字进行搜索bash的history
ctrl+u: 清除光标前至行首间的所有内容。
ctrl+w: 移除光标前的一个单词
ctrl+t: 交换光标位置前的两个字符
ctrl+y: 粘贴或者恢复上次的删除
ctrl+d: 删除光标所在字母;注意和backspace以及ctrl+h的区别，这2个是删除光标前的字符
ctrl+f: 光标右移
ctrl+z : 把当前进程转到后台运行，使用’ fg ‘命令恢复。比如top -d1 然后ctrl+z ，到后台，然后fg,重新恢复
esc组合
esc+d: 删除光标后的一个词
esc+f: 往右跳一个词
esc+b: 往左跳一个词
esc+t: 交换光标
位置前的两个单词。




iwconfig wlan0 essid "finephon" key "s:finep"finephon_aaaa




匹配中文字符的正则表达式： [\u4e00-\u9fa5]
评注：匹配中文还真是个头疼的事，有了这个表达式就好办了

匹配双字节字符(包括汉字在内)：[^\x00-\xff]
评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）

匹配空白行的正则表达式：\n\s*\r
评注：可以用来删除空白行

匹配HTML标记的正则表达式：<(\S*?)[^>]*>.*?</\1>|<.*? />
评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力

匹配首尾空白字符的正则表达式：^\s*|\s*$
评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式

匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*
评注：表单验证时很实用

匹配网址URL的正则表达式：[a-zA-z]+://[^\s]*
评注：网上流传的版本功能很有限，上面这个基本可以满足需求

匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$
评注：表单验证时很实用

匹配国内电话号码：\d{3}-\d{8}|\d{4}-\d{7}
评注：匹配形式如 0511-4405222 或 021-87888822

匹配腾讯QQ号：[1-9][0-9]{4,}
评注：腾讯QQ号从10000开始

匹配中国邮政编码：[1-9]\d{5}(?!\d)
评注：中国邮政编码为6位数字

匹配身份证：\d{15}|\d{18}
评注：中国的身份证为15位或18位

匹配ip地址：\d+\.\d+\.\d+\.\d+
评注：提取ip地址时有用

匹配特定数字：
^[1-9]\d*$　 　 //匹配正整数
^-[1-9]\d*$ 　 //匹配负整数
^-?[1-9]\d*$　　 //匹配整数
^[1-9]\d*|0$　 //匹配非负整数（正整数 + 0）
^-[1-9]\d*|0$　　 //匹配非正整数（负整数 + 0）
^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$　　 //匹配正浮点数
^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$　 //匹配负浮点数
^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$　 //匹配浮点数
^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$　　 //匹配非负浮点数（正浮点数 + 0）
^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$　　//匹配非正浮点数（负浮点数 + 0）
评注：处理大量数据时有用，具体应用时注意修正

匹配特定字符串：
^[A-Za-z]+$　　//匹配由26个英文字母组成的字符串
^[A-Z]+$　　//匹配由26个英文字母的大写组成的字符串
^[a-z]+$　　//匹配由26个英文字母的小写组成的字符串
^[A-Za-z0-9]+$　　//匹配由数字和26个英文字母组成的字符串
^\w+$　　//匹配由数字、26个英文字母或者下划线组成的字符串
评注：最基本也是最常用的一些表达式

















读了几页《Mastering Regular Expression》，有心想写一个能够匹配IP字串的正则表达式，实际尝试发现远没有自己写几行代码来判断来得容易，呵呵。
一个IP字串，由四段组成，每一段是0～255的数字，段与段之间用小数点隔开，比如61.139.2.69就是一个合法的IP字串。
如果正则表达式写成\d{1,3}(\.\d{1,3}){3}无疑是不负责的，因为它可以匹配300.400.555.666这样的非法IP字串。
要匹配一个0～255之间的数，有几种匹配方式，下面是其中一种：
匹配	正则表达式	说明
0～9	\d	单个数字
10～99	[1-9]\d	两位数
100～199	1\d\d	百位为1的三位数
200～249	2[0-4]\d	三位数，百位是2，十位是0～9
250～255	25[0-5]	三位数，百位是2，十位是5，个位是0～5
写成正则表达式，即：(\d|([1-9]\d)|(1\d\d)|(2[0-4]\d)|(25[0-5]))，但是这样的正则表达式在匹配254这样的字串时，会分别匹配2、5、4，得到3个匹配，达不到预期效果，正确做法是将次序颠倒为((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]\d)|\d)，因为在(xxx|yyy)这种匹配行为中，是从左向右搜索的。
完整的正则表达式是：
((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]\d)|\d)(\.((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]\d)|\d)){3}
按：
象061这样的高位为0的数是不能被匹配的。
太麻烦，不如自己写一小段代码解析来得容易，呵呵
 
一个完整的域名，由根域、顶级域、二级、三级……域名构成，每级域名之间用点分开，每级域名由字母、数字和减号构成（第一个字母不能是减号），不区分大小写，长度不超过63。
很显然，单独的名字可以由正则表达式[a-zA-Z0-9][-a-zA-Z0-9]{0,62}来匹配，而完整的域名至少包括两个名字（比如google.com，由google和com构成），最后可以有一个表示根域的点（在规范中，最后有一个点的才是完整域名，但一般认为包括两个以上名字的域名也是完整域名，哪怕它后面没有点）。
匹配完整域名的正则表达式：
[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+\.?




	#if 0
	showInfo("-----\n");
	/* Set Locale */
	time_t rawtime;
	struct tm * timeinfo;
	char buffer [80];
	struct lconv * lc;

	time ( &rawtime );
	timeinfo = localtime (&rawtime);
	int twice = 0;
	
	do 
	{		
		showInfo("Locale is: %s\n", setlocale(LC_ALL,NULL));
		
		strftime (buffer,80,"%c", timeinfo);
		showInfo("Date is: %s\n", buffer);
		
		lc = localeconv ();
		showInfo("Currency symbol is: %s\n-\n", lc->currency_symbol);
		
		showInfo("setloale: %s\n", setlocale(LC_ALL, ""));
	} while (!twice++);
	#endif

typedef long     time_t;

struct timeval 
{
    time_t      tv_sec;     /* seconds */
    suseconds_t tv_usec;    /* microseconds */
};

struct timespec 
{

time_t tv_sec; /* Seconds since 00:00:00 GMT, 1 January 1970 */

long tv_nsec; /* Additional nanoseconds since tv_sec */

} timespec_t;

------------------ get the time since the Epoch
1 time_t time ( time_t * timer );                   
2 int gettimeofday(struct timeval *restrict tp, void *restrict tzp); 

------------------- really get day time
struct tm * localtime ( const time_t * timer );

 




#if 0
/*********************************************************************
****IsDigit
****参数a:字符串的地址
**** 判断字符串是否有纯数字字符组成
**** 是纯数字返回1，不是纯数字返回0
***********************************************************************/
int is_digit(char a[])
{	
    int size, i;
	
    size = strlen(a);
    if(size == 0) 
		return 0;
	
    for(i = 0; i< size; i++)
    {
		if(a[i] <'0' 
		   || a[i] > '9')
		{	
			return 0;
		}	
    }
    return 1;
}

/*********************************************************************
****check_proc
****参数array:进程描述结构体指针
**** 检测程序是否正在运行
**** 正在运行返回1，没有运行返回0
***********************************************************************/
int check_proc(char* name)
{	
	showInfo("on %s, name: %s\n", __FUNCTION__, name);
	DIR * dp;
	struct dirent* dirp;
	//struct proc_struct* tmp;
	
	if(NULL == name)
	{	
		return 0;
	}	
	
	if((dp = opendir(PROC))== NULL)
	{  	
		showWarning("Open Dir %s Err\n", PROC);
		return 0;
	}
	
	while ((dirp = readdir(dp)) != NULL) 
	{	
		char data[30];
		
		sprintf(data, "%s", dirp->d_name);
		if((is_digit(data)))
		{	
			if(strcmp(data, name) == 0)	
				return 1;
		}	
	}
	closedir(dp);
	return 0;
}
#endif


SYNOPSIS
#include <sys/socket.h>

int socket(int domain, int type, int protocol);


DESCRIPTION
The socket() function shall create an unbound socket in a communications domain, and return a file descriptor that can be used in later function calls that operate on sockets.

The socket() function takes the following arguments:

domain 
Specifies the communications domain in which a socket is to be created. 
type 
Specifies the type of socket to be created. 
protocol 
Specifies a particular protocol to be used with the socket. Specifying a protocol of 0 causes socket() to use an unspecified default protocol appropriate for the requested socket type. 
The domain argument specifies the address family used in the communications domain. The address families supported by the system are implementation-defined.

Symbolic constants that can be used for the domain argument are defined in the <sys/socket.h> header.

The type argument specifies the socket type, which determines the semantics of communication over the socket. The following socket types are defined; implementations may specify additional socket types:

SOCK_STREAM 
Provides sequenced, reliable, bidirectional, connection-mode byte streams, and may provide a transmission mechanism for out-of-band data. 
SOCK_DGRAM 
Provides datagrams, which are connectionless-mode, unreliable messages of fixed maximum length. 
SOCK_SEQPACKET 
Provides sequenced, reliable, bidirectional, connection-mode transmission paths for records. A record can be sent using one or more output operations and received using one or more input operations, but a single operation never transfers part of more than one record. Record boundaries are visible to the receiver via the MSG_EOR flag. 
If the protocol argument is non-zero, it shall specify a protocol that is supported by the address family. If the protocol argument is zero, the default protocol for this address family and type shall be used. The protocols supported by the system are implementation-defined.

The process may need to have appropriate privileges to use the socket() function or to create some sockets.

RETURN VALUE
Upon successful completion, socket() shall return a non-negative integer, the socket file descriptor. Otherwise, a value of -1 shall be returned and errno set to indicate the error.

ERRORS
The socket() function shall fail if:

[EAFNOSUPPORT] 
The implementation does not support the specified address family. 
[EMFILE] 
No more file descriptors are available for this process. 
[ENFILE] 
No more file descriptors are available for the system. 
[EPROTONOSUPPORT] 
The protocol is not supported by the address family, or the protocol is not supported by the implementation. 
[EPROTOTYPE] 
The socket type is not supported by the protocol. 
The socket() function may fail if:

[EACCES] 
The process does not have appropriate privileges. 
[ENOBUFS] 
Insufficient resources were available in the system to perform the operation. 
[ENOMEM] 
Insufficient memory was available to fulfill the request. 




--------------------------------------------------------------
	#if 0
	int send_sock;
	int numbytes;
	const char *receiver_addr_str = "10.10.211.33";
	struct sockaddr_in receiver_addr;
	char buf[128];
	
	if((send_sock = socket(AF_INET, SOCK_DGRAM, 0)) == -1) 
	{			
		showError("**** Socket Create Err\n");
		return -1;
	}		
	
	receiver_addr.sin_family = AF_INET;         	
	//receiver_addr.sin_port = htons(SERVER_PORT);
		
	if (inet_pton(AF_INET, receiver_addr_str, &receiver_addr.sin_addr) <= 0)
	{	
		showError("inet_pton error for %s\n", receiver_addr_str);
		return -1;
	}	
	
	strcpy(buf, "this a testkkk");
	send_frame(buf, strlen(buf), SERVER_PORT, (struct sockaddr *)&receiver_addr);
	#endif



算符 用途 用法 
allinanchor: 限制搜索的词语是网页中链接内包含的关键词（可使用多个关键词） allinanchor:keyword1 keyword2 
allintext: 限制搜索的词语是网页内文包含的关键词（可使用多个关键词） allintext:keyword1 keyword2 
allintitle: 限制搜索的词语是网页标题中包含的关键词（可使用多个关键词） allintitle:keyword1 keyword2 
allinurl: 限制搜索的词语是网页网址中包含的关键词（可使用多个关键词） inurl:keyword1 keyword2 
filetype: 限制所搜索的文件一个特定的格式 filetype:extension 
inanchor: 限制搜索的词语是网页中链接内包含的关键词 inanchor:keyword 
intext: 限制搜索的词语是网页内文包含的关键词 intext:keyword 
intitle: 限制搜索的词语是网页标题中包含的关键词 intitle:keyword 
inurl: 限制搜索的网页的地址 inurl:keyword 
site: 限制所进行的搜索在指定的域名或网站内 site:domain 



--------------------------------- tomcat ssl:
/************* gen server key ***************/
keytool -genkey -v -alias tomcat -keyalg RSA -keystore E:/soft/develop/apache-tomcat-6.0.33/key_store/tomcat.keystore -dname "CN=10.10.188.188,OU=server,O=logis,L=guangzhou,ST=guangzhou,C=CN" -validity 3650 -storepass serverpwd -keypass serverpwd

./keytool -genkey -v -alias tomcat -keyalg RSA -keystore /home/elon/open-source/apache-tomcat-6.0.33/key_store/tomcat.keystore -dname "CN=10.10.188.188,OU=server,O=logis,L=guangzhou,ST=guangzhou,C=CN" -validity 3650 -storepass serverpwd -keypass serverpwd

/*********** gen client key **************/
keytool -genkey -v -alias elon -keyalg RSA -storetype PKCS12 -keystore E:/note/elon.p12 -dname "CN=elon,OU=client,O=logis,L=guangzhou,ST=guangzhou,C=CN" -validity 3650 -storepass clientpwd -keypass clientpwd

keytool -genkey -v -alias elon -keyalg RSA -storetype PKCS12 -keystore E:/note/elon.p12 -dname "CN=elon,OU=client,O=logis,L=guangzhou,ST=guangzhou,C=CN" -validity 3650 -storepass clientpwd -keypass clientpwd


/******* export the server trust cer from client cer********/
keytool -export -alias elon -keystore E:/note/elon.p12 -storetype PKCS12 -storepass clientpwd -rfc -file E:/note/elon.cer

./keytool -export -alias elon -keystore /home/elon/tmp/elon.p12 -storetype PKCS12 -storepass clientpwd -rfc -file /home/elon/tmp/elon.cer

/*********** import trust cer to server **************/
keytool -import -alias elon -v -file E:/note/elon.cer -keystore E:/soft/develop/apache-tomcat-6.0.33/key_store/tomcat.keystore -storepass serverpwd

./keytool -import -alias elon -v -file /home/elon/tmp/elon.cer -keystore /home/elon/open-source/apache-tomcat-6.0.33/key_store/tomcat.keystore -storepass serverpwd

//list the server trust cer
keytool -list -keystore E:/soft/develop/apache-tomcat-6.0.33/key_store/tomcat.keystore

./keytool -list -keystore E:/soft/develop/apache-tomcat-6.0.33/key_store/tomcat.keystore


keytool error: java.lang.Exception: Keystore file does not exist: E:/soft/develop/apache-tomcat-6.0.33/key_store/tomcat.keystore

  <Connector port="8443" protocol="org.apache.coyote.http11.Http11Protocol" SSLEnabled="true"
			    maxThreads="150" scheme="https" secure="true"
			    clientAuth="true" sslProtocol="TLS"
			    keystoreFile="E:/soft/develop/apache-tomcat-6.0.33/key_store/tomcat.keystore" keystorePass="serverpwd"
			    truststoreFile="E:/soft/develop/apache-tomcat-6.0.33/key_store/tomcat.keystore" truststorePass="serverpwd"/>

PKCS#1：定义RSA公开密钥算法加密和签名机制，主要用于组织PKCS#7中所描述的数字签名和数字信封。  
PKCS#3：定义Diffie-Hellman密钥交换协议。  
PKCS#5：描述一种利用从口令派生出来的安全密钥加密字符串的方法。使用MD2或MD5 从口令中派生密钥，并采用DES-CBC模式加密。主要用于加密从一个计算机传送到另一个计算机的私人密钥，不能用于加密消息。  
PKCS#6：描述了公钥证书的标准语法，主要描述X.509证书的扩展格式。  
PKCS#7：定义一种通用的消息语法，包括数字签名和加密等用于增强的加密机制，PKCS#7与PEM兼容，所以不需其他密码操作，就可以将加密的消息转换成PEM消息。  
PKCS#8：描述私有密钥信息格式，该信息包括公开密钥算法的私有密钥以及可选的属性集等。  
PKCS#9：定义一些用于PKCS#6证书扩展、PKCS#7数字签名和PKCS#8私钥加密信息的属性类型。  
PKCS#10：描述证书请求语法。  
PKCS#11：称为Cyptoki，定义了一套独立于技术的程序设计接口，用于智能卡和PCMCIA卡之类的加密设备。  
PKCS#12：描述个人信息交换语法标准。描述了将用户公钥、私钥、证书和其他相关信息打包的语法。  
PKCS#13：椭圆曲线密码体制标准。  
PKCS#14：伪随机数生成标准。  
PKCS#15：密码令牌信息格式标准。
  

pkcs12-----------
The correct title of this article is PKCS #12. The substitution or omission of the # sign is because of technical restrictions.
In cryptography, PKCS #12 is one of the family of standards called Public-Key Cryptography Standards (PKCS), published by RSA Laboratories. It defines a file format commonly used to store X.509 private keys with accompanying public key certificates, protected with a password-based symmetric key, and is the successor to PFX from Microsoft. PFX has received heavy criticism of being one of the most complex cryptographic protocols [1], but nevertheless remains the only standard way today to store private keys and certificates in a single encrypted file[citation needed].
File extension: .p12

secure crt log naming expression: E:\note\log\%S %Y-%M-%D %h;%m;%s.log

Note that "keytool -exportcert" command uses DER format by default. The "-rfc" option is to change it to PEM (RFC 1421) format. 



*************************How do I export or import a PKCS#12 certificate*********************************
If someone sends you a PKCS#12 and any passwords needed to work with it, you can export it into standard PEM format.

# export certificate and passphrase-less key
openssl pkcs12 -in mycert.pfx -out mycert.pem -nodes

# same as above, but you’ll be prompted for a passphrase for
# the private key
openssl pkcs12 -in mycert.pfx -out mycert.pem





-------------------------------------------------------------------------------
一. 创建CA
1. 创建CA需要用到的目录和文件：
执行命令如下：
mkdir "$HOME/testca"
cd "$HOME/testca"
mkdir newcerts private conf
chmod g-rwx,o-rwx private
echo "01" > serial
touch index.txt
 
说明：
$HOME/testca为待建CA的主目录。其中newcerts子目录将存放CA签署（颁发）过的数字证书（证书备份目录）。而private目录用于存放CA的私钥。目录conf只是用于存放一些简化参数用的配置文件。
 
文件serial和index.txt分别用于存放下一个证书的序列号和证书信息数据库。
当然，偷懒起见，可以只用按照本文操作即可，不一定需要关心各个目录和文件的作用。
 
2. 生成CA的私钥和自签名证书（即根证书）
创建文件：
vi "$HOME/testca/conf/gentestca.conf"
文件内容如下：
####################################
[ req ]
default_keyfile = $ENV::HOME/testca/private/cakey.pem
default_md = md5
prompt = no
distinguished_name = ca_distinguished_name
x509_extensions = ca_extensions
 
[ ca_distinguished_name ]
organizationName = TestOrg
organizationalUnitName  = TestDepartment
commonName = TestCA
emailAddress = ca_admin@testorg.com
 
[ ca_extensions ]
basicConstraints = CA:true
########################################
 
然后执行命令如下：
cd "$HOME/testca"
openssl req -x509 -newkey rsa:2048 -out cacert.pem -outform PEM -days 2190 -config "$HOME/testca/conf/gentestca.conf"
执行过程中需要输入CA私钥的保护密码，假设我们输入密码： 888888
 
可以用如下命令查看一下CA自己证书的内容
openssl x509 -in cacert.pem -text -noout
 
3. 创建一个配置文件，以便后续CA日常操作中使用：
vi "$HOME/testca/conf/testca.conf"
文件内容如下：
####################################
[ ca ]
default_ca      = testca                   # The default ca section
 
[ testca ]
dir            = $ENV::HOME/testca         # top dir
database       = $dir/index.txt          # index file.
new_certs_dir  = $dir/newcerts           # new certs dir
 
certificate    = $dir/cacert.pem         # The CA cert
serial         = $dir/serial             # serial no file
private_key    = $dir/private/cakey.pem  # CA private key
RANDFILE       = $dir/private/.rand      # random number file
 
default_days   = 365                     # how long to certify for
default_crl_days= 30                     # how long before next CRL
default_md     = md5                     # message digest method to use
unique_subject = no                      # Set to 'no' to allow creation of
                                         # several ctificates with same subject.
policy         = policy_any              # default policy
 
[ policy_any ]
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional 
---------------------------------------------------------------------------------------------





------------------------------------------------------------------------
创建个人密钥和证书请求（证书请求里包含了公钥）
创建$HOME/testuser1目录并执行命令：（证书等都放到这个目录）
mkdir $HOME/testuser1
cd $HOME/testuser1
openssl req -newkey rsa:1024 -keyout testkey.pem -keyform PEM -out testreq.pem -outform PEM -subj "/O=TestCom/OU=TestOU/CN=testuser1" 
执行过程中需要输入私钥的保护密码，假设我们输入密码： 222222
 
执行完后，testkey.pem即为用户的密钥，而testreq.pem即为证书请求。
可以用openssl req -in testreq.pem -text -noout查看证书请求的内容。
 
2. 用CA为testuser1签发个人证书
同样还在$HOME/testuser1目录下执行命令：
openssl ca -in testreq.pem -out testcert.pem -config "$HOME/testca/conf/testca.conf"
执行过程中需要输入CA的密钥保护密码（刚才设置的888888），并且最后询问你是否要给该用户签发证书时要选y。
执行完后，testcert.pem即为证书，
可以用命令openssl x509 -in testcert.pem -text -noout查看证书内容。
 
3. 制作PKCS12文件（个人数字证书）
我们制作的这个PKCS#12文件将包含密钥、证书和颁发该证书的CA证书。
把前几步生成的密钥和证书制作成一个pkcs12文件的方法执行命令：
openssl pkcs12 -export -in testcert.pem -inkey testkey.pem -out testuser1.p12 -name testuser1 -chain -CAfile "$HOME/testca/cacert.pem"
执行过程中需要输入保护密钥的密码（222222），以及新的保护pkcs12文件的密码（222222）。
 
执行完后，若要查看testuser1.p12的内容可以用命令openssl pkcs12 -in testuser1.p12
该testuser1.p12即为pkcs12文件。你可以直接拷贝到windows下，作为个人数字证书，双击导入IE后就可以使用了。
 




10.0.0.0~10.255.255.255，172.16.0.0~172.16.255.255， 192.168.0.0~192.168.255.255